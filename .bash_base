#!/bin/bash
# vim: ft=sh

# echo "loading ~/.bash_once [flags: $-]"

shopt -s autocd

uname_value=$(uname)

export HISTFILESIZE=-1
export HISTSIZE=-1
export HISTTIMEFORMAT="[%F %T] "
export HISTFILE=~/.bash_eternal_history
# PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

addPath() {
    if [ ! -d "$1" ]; then
        # echo "[addPath()] No such directory ($1)"
        return 1
    fi
    if [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1:${PATH:+"$PATH"}"
    # else
    #     echo "[addPath()] Already added ($1)"
    fi
}

showPath() {
    echo $PATH | sed 's/:/\n/g' | sort
}

load_if_exist() {
    [ -e $1 ] && source $1
}

can() {
    command -v $1 >/dev/null
}

addPath ${HOME}/.dotfiles/bin
addPath ${HOME}/n/bin
addPath ${HOME}/.local/bin
addPath ${HOME}/dev/bin
addPath ${HOME}/.cargo/bin
addPath ${HOME}/.anyenv/bin
addPath /opt/bin
addPath /opt/platform-tools
addPath /usr/local/go/bin
addPath /var/lib/snapd/snap/bin
addPath ${HOME}/.kubectx
addPath ${HOME}/google-cloud-sdk/bin
addPath ${HOME}/.asdf/shims
can aqua && addPath $(aqua root-dir)/bin

source ~/.dotfiles/shell.d/*.bash

can anyenv && eval "$(anyenv init -)" && export ANYENV_EVALUATED=true

test -d $HOME/.rye/env && source $HOME/.rye/env

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

type -p direnv > /dev/null && eval "$(direnv hook bash)"

export GOPATH=$HOME/dev

load_if_exist ~/.asdf/asdf.sh

can npm && eval "`npm completion`"

if [ $uname_value = "Darwin" ]; then
    if type brew &>/dev/null; then
        HOMEBREW_PREFIX="$(brew --prefix)"
        if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
              source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
        else
            for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
                echo "Try: $COMPLETION"
                if [[ -r "$COMPLETION" ]]; then
                    echo "$COMPLETION"
                    source "$COMPLETION"
                fi
            done
        fi
        export PATH="/opt/homebrew/opt/mysql-client/bin:$PATH"
        export PATH="/opt/homebrew/bin:$PATH"
        export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"

    fi
fi
if [ $uname_value = "Linux" ]; then
  load_if_exist /usr/share/git/completion/git-completion.bash
  load_if_exist /usr/share/git/completion/git-prompt.sh

  load_if_exist /usr/lib/git-core/git-sh-prompt
  load_if_exist /usr/share/bash-completion/completions/git

  load_if_exist /usr/share/git/completion/git-prompt.sh
fi
__git_complete g __git_main

if [ $uname_value = 'Darwin' ]; then
    export PS1='\nüçé '
elif [ $uname_value = "Linux" ]; then
    export PS1='\nüêß '
else
    export PS1='\n$ '
fi
# export PS1='\u@\h \w$(__git_ps1)\n\$ '

export FZF_DEFAULT_COMMAND='fd --type f'

git-switch-branch() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

http() {
    cat ~/.dotfiles/http-status.txt | fzf
}

fzf-ghq-widget () {
    local selected=`ghq list --full-path | fzf` || return $?
    READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}";
    READLINE_POINT=$(( READLINE_POINT + ${#selected} ));
    cd $selected
}
bind -x '"\C-g": "fzf-ghq-widget"'


mkcd () {
    mkdir -p $1 && cd $1
}

function ignore-bidning-pry() {
    echo "Lint/Debugger:" >> ./.rubocop_todo.yml
    echo "  Enabled: false" >> ./.rubocop_todo.yml
}

for f in $(find ~/localrc.d -type f -o -type l 2> /dev/null); do
    echo 'source' $f
    source $f
done

xranup() {
    # xrandr --output DP1 --mode 2560x1440 --above eDP1
    xrandr --output DP1 --mode 2560x1440 --left-of eDP1
}

if [ -x "$(which makefile-completion-go 2>/dev/null)" ]; then
    function _makefile_targets_01 {
        local curr_arg;
        local targets;
        targets=''
        if [[ -e "$(pwd)/Makefile" ]]; then
            targets=$(makefile-completion-go)
        fi
        curr_arg=${COMP_WORDS[COMP_CWORD]}
        COMPREPLY=( $(compgen -W "${targets[@]}" -- $curr_arg ) );
    }
    complete -F _makefile_targets_01 make
fi

